<launch>
    
    <arg name="is_model_floating_base" default="true"/>
    <param name="contact_type" type="str" value="point"/>
    <param name="goalSamplerType" type="str" value="goalSampler2"/>
    
    <!--  <include file="$(find centauro_gazebo)/launch/centauro_world.launch" />-->
    <!--<param name="robot_description" textfile="$(env ROBOTOLOGY_ROOT)/external/cartesio_planning/examples/utils/urdf/cogimon.urdf"/>
    <param name="robot_description_semantic" textfile="$(env ROBOTOLOGY_ROOT)/external/cartesio_planning/examples/utils/srdf/cogimon.srdf"/>--> 
        
    <param name="robot_description" textfile="$(env ROBOTOLOGY_ROOT)/external/cartesio_planning/examples/utils/urdf/centauro.urdf"/> -->
    <param name="robot_description_semantic" textfile="$(env ROBOTOLOGY_ROOT)/external/cartesio_planning/examples/utils/srdf/centauro.srdf"/>  
      
    
    <param name="planner/problem_description"
            textfile="$(find cartesio_planning)/configs/problem/centauro_fp_stack.yaml"/>  
    
    <param name="planner/problem_goal_description"
            textfile="$(find cartesio_planning)/configs/problem/centauro_fp_goal_stack.yaml"/> 
    
    <!--<param name="planner/wheel_description"
            textfile="$(find centauro_cartesio)/configs/centauro_postural_wheeled.yaml"/> -->
    
        <!-- .bag file containing 2 boxes acquired using octomap -->
<!--     <node pkg="rosbag" type="play" name="bag_player" args="-l $(env ROBOTOLOGY_ROOT)/external/cartesio_planning/bagfiles/narrow_corridor2_exp.bag" output="screen"/> -->
    
    <node pkg="cartesio_planning" type="foot_step_planner" name="foot_step_planner" output="screen">
        <param name="solver" value=""/>
        <param name="is_model_floating_base" value="$(arg is_model_floating_base)"/>
        <param name="planner_config"
            textfile="$(find cartesio_planning)/configs/problem/centauro_fp_config.yaml"/>
        <param name="urdf" textfile="$(env ROBOTOLOGY_ROOT)/external/cartesio_planning/examples/utils/urdf/centauro_vc.urdf"/>
    </node>
    
    <node pkg="cartesio_planning" type="previewer" name="previewer" output="screen"/>
    <node pkg="cartesio_planning" type="publisher" name="publisher" output="screen"/>
    
    <!-- This is needed to connect robot_start marker with "world" frame -->
    <node pkg="tf" type="static_transform_publisher" name="world_connecter_planner_start"
        args="0 0 0. 0 0 0 world planner/start/world 30"/>
    
    <!-- This is needed to connect robot_goal marker with "world" frame -->
    <node pkg="tf" type="static_transform_publisher" name="world_connecter_planner_goal"
        args="0 0 0. 0 0 0 world planner/goal/world 30"/>
    
    <!-- This is needed to connect "planner/world" with "world" frame -->
    <node pkg="tf" type="static_transform_publisher" name="world_connecter_planner_world"
        args="0 0 0. 0 0 0 world planner/world 30"/>
    
    <node pkg="tf" type="static_transform_publisher" name="world_connecter_planner_discrete_world"
          args="0 0 0. 0 0 0 world planner/discrete/world 30"/>
    <!--<node pkg="tf" type="static_transform_publisher" name="map_connecter_planner_discrete_world"
          args="0 -0.06 0. 0 0 0 world map 600"/>-->
    <!-- single short and wide obstacle -->
    <!-- mesh_viz for obstacle generation -->
    <!--<node name="mesh_viz_floor" pkg="mesh_viz" type="mesh_viz_node" output="screen">
        <param name="mesh_path" value="$(find cartesio_planning)/utils/simple_box.stl" />
        <param name="scale_x" type="double" value="1."/>
        <param name="scale_y" type="double" value="4.0"/>
        <param name="scale_z" type="double" value=".2"/>
        <rosparam param="position"> [1.5, 0.0, 0.1] </rosparam>
        <rosparam param="orientation"> [0.0, 0.0, 0.0, 1.0] </rosparam>
        <param name="frame_id" value="world"/>
        <param name="name_id" value="floor"/>
        <param name="show_control_axis" type="bool" value="True"/>
        <remap from="mesh_viz_floor/floor" to="planner/collision_objects"/>
    </node>-->
    
    <!-- narrow corridor -->
<!--    <node name="mesh_viz_floor" pkg="mesh_viz" type="mesh_viz_node" output="screen">
        <param name="mesh_path" value="$(find cartesio_planning)/utils/simple_box.stl" />
        <param name="scale_x" type="double" value="1.0"/>
        <param name="scale_y" type="double" value="2.0"/>
        <param name="scale_z" type="double" value="1.5"/>
        <rosparam param="position"> [1.5, -1.4, 0.75] </rosparam>
        <rosparam param="orientation"> [0.0, 0.0, 0.0, 1.0] </rosparam>
        <param name="frame_id" value="world"/>
        <param name="name_id" value="floor"/>
        <param name="show_control_axis" type="bool" value="True"/>
        <remap from="mesh_viz_floor/floor" to="planner/collision_objects"/>
    </node>
    
   <node name="mesh_viz_floor1" pkg="mesh_viz" type="mesh_viz_node" output="screen">
        <param name="mesh_path" value="$(find cartesio_planning)/utils/simple_box.stl" />
        <param name="scale_x" type="double" value="1.0"/>
        <param name="scale_y" type="double" value="2.0"/>
        <param name="scale_z" type="double" value="1.5"/>
        <rosparam param="position"> [1.5, 1.4, 0.75] </rosparam>
        <rosparam param="orientation"> [0.0, 0.0, 0.0, 1.0] </rosparam>
        <param name="frame_id" value="world"/>
        <param name="name_id" value="floor1"/>
        <param name="show_control_axis" type="bool" value="True"/>
        <remap from="mesh_viz_floor1/floor1" to="planner/collision_objects"/>
    </node>-->
    
    <!-- 2 boxes -->
     <!--   <node name="mesh_viz_floor" pkg="mesh_viz" type="mesh_viz_node" output="screen">
        <param name="mesh_path" value="$(find cartesio_planning)/utils/simple_box.stl" />
        <param name="scale_x" type="double" value="1.0"/>
        <param name="scale_y" type="double" value="1.0"/>
        <param name="scale_z" type="double" value="1.0"/>
        <rosparam param="position"> [1.5, -1.4, 0.75] </rosparam>
        <rosparam param="orientation"> [0.0, 0.0, 0.0, 1.0] </rosparam>
        <param name="frame_id" value="world"/>
        <param name="name_id" value="floor"/>
        <param name="show_control_axis" type="bool" value="True"/>
        <remap from="mesh_viz_floor/floor" to="planner/collision_objects"/>
    </node>
    
   <node name="mesh_viz_floor1" pkg="mesh_viz" type="mesh_viz_node" output="screen">
        <param name="mesh_path" value="$(find cartesio_planning)/utils/simple_box.stl" />
        <param name="scale_x" type="double" value="1.0"/>
        <param name="scale_y" type="double" value="1.0"/>
        <param name="scale_z" type="double" value="1.0"/>
        <rosparam param="position"> [1.5, 1.4, 0.75] </rosparam>
        <rosparam param="orientation"> [0.0, 0.0, 0.0, 1.0] </rosparam>
        <param name="frame_id" value="world"/>
        <param name="name_id" value="floor1"/>
        <param name="show_control_axis" type="bool" value="True"/>
        <remap from="mesh_viz_floor1/floor1" to="planner/collision_objects"/>
    </node>-->
    
    <node pkg="PCL_Perception" type="pass_through" name="pass_through_filter" output="screen"
          args = "-0.9 0.9 y true">
        <remap from="/cloud_in" to="/velodyne_points"/>
        <remap from="/cloud_out" to ="/filtered_cloud1"/>
    </node>
    
    <node pkg="PCL_Perception" type="pass_through" name="pass_through_filter_octomap" output="screen"
          args = "0.0 1.3 x false">
        <remap from="/cloud_in" to="/filtered_cloud1"/>
        <remap from="/cloud_out" to="/filtered_cloud2"/>
    </node>
    
     <!-- Include octomap if required -->
   <node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
        <param name="resolution" value="0.05" />
        <param name="frame_id" type="string" value="world" />
        <param name="sensor_model/max_range" value="5.0" />
        <remap from="cloud_in" to="/filtered_cloud2" />-->
<!--          <param name="filter_ground" type="bool" value="true"/> --> -->
<!--         <param name="base_frame_id" type="string" value="world"/> -->
<!--         <param name="ground_filter/distance" value="0.1"/> -->
<!--         <param name="ground_filter/plane_distance" value="0.3"/> -->
<!--         <param name="ground_filter/plane_distance" value="0.6"/> -->
        <param name="latch" type="bool" value="true"/>
    </node> 
    
    <!-- Octomap converter -->
    <node pkg="cartesio_planning" type="octomap_collision_main" name="octomap_converter" output="screen"/>
    
    <!-- Planning scene -->
    <node pkg="cartesio_planning" type="planning_scene_publisher" name="planning_scene_publisher" output="screen"/> 
    
    <node pkg="rviz" type="rviz" name="rviz"
          args="-d $(find cartesio_planning)/configs/rviz/comanplus_fp.rviz" output="screen"/>
    
</launch>