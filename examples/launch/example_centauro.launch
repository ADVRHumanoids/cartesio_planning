<launch>
  <arg name="is_model_floating_base" default="true"/>
<<<<<<< HEAD
  <arg name="use_goal_generator" default="false"/>  
  
  <!-- Pass throuh filter parameters -->
  <param name="lower_limit" value="-0.85"/>
  <param name="upper_limit" value="0.85"/>
  <param name="filterFieldName" type="string" value="y"/>
  <param name="filter_behavior" type="bool" value="true"/>
   
  <!--  <include file="$(find centauro_gazebo)/launch/centauro_world.launch" />-->
  <param name="robot_description" textfile="$(find centauro)/centauro_urdf/urdf/centauro_control_lb.urdf"/>
  <param name="robot_description_semantic" textfile="$(find centauro)/centauro_srdf/srdf/centauro_generated_lb.srdf"/> 
=======
  <arg name="use_goal_generator" default="false"/>
   
<!--  <include file="$(find centauro_gazebo)/launch/centauro_world.launch" />-->
<!--  <param name="model_description/robot_description" 
        textfile="$(find centauro_cartesio)/configs/urdf/centauro_car.urdf"/>
    
  <param name="model_description/robot_description_semantic"
        textfile="$(find centauro_cartesio)/configs/srdf/centauro_car.srdf"/>-->
  
<!--  <param name="robot_description" textfile="$(find centauro)/centauro_urdf/urdf/centauro_generated.urdf"/>
  <param name="robot_description_semantic" textfile="$(find centauro)/centauro_srdf/srdf/centauro_generated.srdf"/> -->
  
  <param name="robot_description" textfile="$(find centauro)/centauro_urdf/urdf/centauro_control.urdf"/>
  <param name="robot_description_semantic" textfile="$(find centauro)/centauro_srdf/srdf/centauro_generated.srdf"/> 
>>>>>>> cceb35fc3d0c2b920c4b654bdff02e496501a74b

  <param name="cartesian/problem_description"
      textfile="$(find cartesio_planning)/configs/problem/centauro_goal_generation_stack.yaml"/>

  <!-- send problem description to param server: this is used by goal sampler -->
  <param name="planner/problem_description_goal"
      textfile="$(find cartesio_planning)/configs/problem/centauro_goal_generation_stack.yaml"/>
    
<<<<<<< HEAD
  <!-- send manifold definito to param server -->
   <param name="planner/problem_description_constraint"
        textfile="$(find cartesio_planning)/configs/problem/centauro_constraint_stack.yaml"/> 
=======
  <!-- send manifold defined to param server -->
  <param name="planner/problem_description_constraint"
        textfile="$(find cartesio_planning)/configs/problem/centauro_constraint_stack.yaml"/>
>>>>>>> cceb35fc3d0c2b920c4b654bdff02e496501a74b
  
  <!-- start planner -->  
  <node pkg="cartesio_planning" type="planning_server" name="planning_server" output="screen">
      <remap from="planner/goal/joint_states" to="cartesian/solution"/>
      <param name="solver" value=""/>
      <param name="is_model_floating_base" value="$(arg is_model_floating_base)"/>
      <param name="use_goal_generator" value="$(arg use_goal_generator)"/>
      <param name="planner_config"
          textfile="$(find cartesio_planning)/configs/problem/centauro_config.yaml"/>
  </node> 

  <!-- Previewer of trajectory -->
  <node pkg="cartesio_planning" type="previewer" name="planner_previewer" output="screen">
      <param name="is_model_floating_base" value="$(arg is_model_floating_base)"/>
  </node>
  
  <node pkg="tf" type="static_transform_publisher" name="world_connecter_planner_world"
      args="0 0 0. 0 0 0 world planner/world 30"/>

  <!-- This is needed to connect robot_start marker with "world" frame -->
  <node pkg="tf" type="static_transform_publisher" name="world_connecter_planner_start"
      args="0 0 0. 0 0 0 world planner/start/world 30"/>
  
  <!-- This is needed to connect robot_goal marker with "world" frame -->
  <node pkg="tf" type="static_transform_publisher" name="world_connecter_planner_goal"
      args="0 0 0. 0 0 0 world planner/goal/world 30"/>

  <!-- Goal sampler to generate goal state -->
  <node if="$(arg use_goal_generator)" pkg="cartesian_interface" type="marker_spawner" name="goal_marker_spawner" output="screen">
      <param name="ns" value="planner/goal_sampler"/>
      <param name="tf_prefix" value="planner/goal_sampler"/>
  </node>
  
  <!-- This is needed to connect robot_goal marker with "world" frame -->
  <node pkg="tf" type="static_transform_publisher" name="world_connecter_planner_goal_sampler"
      args="0 0 0 0 0 0 world planner/goal_sampler/world 30"/>
 
  
  <!-- Goal sampler to generate goal state -->
  <node if="$(arg use_goal_generator)" pkg="cartesian_interface" type="marker_spawner" name="goal_marker_spawner" output="screen">
      <param name="ns" value="planner/goal_sampler"/>
      <param name="tf_prefix" value="planner/goal_sampler"/>
  </node>
  
  <!-- CARTESI/O to generate goal state -->
  <!-- send problem description to param server: this is used by CartesI/O for IK -->
  <param name="cartesian/problem_description"
<<<<<<< HEAD
      textfile="$(find cartesio_planning)/configs/problem/centauro_cartesio_stack.yaml"/>
  <param name="cartesian/joint_blacklist" type="yaml" 
      value="[neck_velodyne]"/>
=======
      textfile="$(find centauro_cartesio)/configs/centauro_simple_stack.yaml"/>
  <param name="cartesian/joint_blacklist" type="yaml" 
        value="[neck_velodyne]"/>
>>>>>>> cceb35fc3d0c2b920c4b654bdff02e496501a74b
  <include unless="$(arg use_goal_generator)" file="$(find cartesian_interface)/launch/cartesio.launch">
      <arg name="tf_prefix" value="ci"/>
      <arg name="is_model_floating_base" value="$(arg is_model_floating_base)"/>
  </include>
  
  <node pkg="PCL_Perception" type="pass_through" name="pass_through"/>
    
  <!-- Include octomap -->
  <node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
      <param name="frame_id" type="string" value="world"/>
      <param name="resolution" value="0.05"/>
      <remap from="cloud_in" to="filtered_cloud"/>
      <param name="latch" type="bool" value="false"/>
      <param name="filter_ground" type="bool" value="true"/>
      <param name="base_frame_id" type="string" value="world"/>
      <param name="ground_filter/distance" value="0.15"/>
      <!--<param name="ground_filter/plane_distance" value="0.25"/>-->
      <param name="ground_filter/plane_distance" value="0.6"/>
  </node>
  
  <!-- Obstacle with octomap -->
  <node pkg="cartesio_planning" type="octomap_collision_main" name="octomap_collision_main"/>
  
  <!-- This is needed to connect cartesio marker with "world" frame -->
  <node unless="$(arg use_goal_generator)" pkg="tf" type="static_transform_publisher" name="world_connecter_planner_ci"
      args="0 0 0. 0 0 0 world ci/world 30"/>
  
  <node if="$(arg use_goal_generator)" pkg="tf" type="static_transform_publisher" name="world_connecter_planner_goal_generator"
      args="0 0 0. 0 0 0 world planner/goal_sampler/world 30"/>
  
   
  <!-- Launch octomap -->
  <node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
                <param name="resolution" value="0.05" />
                <param name="frame_id" type="string" value="world" />
                <param name="sensor_model/max_range" value="5.0" />
                <remap from="cloud_in" to="/velodyne_points" />
                <param name="latch" type="bool" value="false"/>
                <param name ="filter_ground" type="bool" value="false"/>-->
<!--                 <remap from="octomap_binary" to="planner/collision_objects"/> -->
  </node> 
  
 <node pkg="cartesio_planning" type="octomap_collision_main" name="octomap_collision_main"/>

  
  <!-- Planning scene -->
  <node pkg="cartesio_planning" type="planning_scene_publisher" name="planning_scene_publisher" output="screen"/> 
  
  <node name="rviz" pkg="rviz" type="rviz" 
	args="-d $(find cartesio_planning)/configs/rviz/example_centauro_velodyne.rviz" output="screen"/>
  
</launch>